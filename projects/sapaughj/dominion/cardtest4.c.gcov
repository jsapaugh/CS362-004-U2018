        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author : Jacob Sapaugh
        -:    3:*          Oregon State University
        -:    4:*          CS 362
        -:    5:*          07-18-2018
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "interface.h"
        -:   11:#include "rngs.h"
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:
        -:   15:void assertEquals(int expected, int actual, char message[]);
        -:   16:void testSmithy();
        -:   17:
function main called 1 returned 100% blocks executed 100%
        1:   18:int main(int argc, char* argv[]) 
        -:   19:{
        1:   20:    char functionUnderTest[] = "int cardEffect(...) gardensEffect(...)";
        -:   21:
        1:   22:    printf("__________________________________________________________________\n");
call    0 returned 100%
        1:   23:    fflush(stdout);        
call    0 returned 100%
        1:   24:    printf("*******Begin testing of %s*******\n",functionUnderTest);
call    0 returned 100%
        1:   25:    fflush(stdout);        
call    0 returned 100%
        -:   26:    
        1:   27:    testSmithy();
call    0 returned 100%
        -:   28:    
        1:   29:    printf("*******End testing of %s*******\n",functionUnderTest);
call    0 returned 100%
        1:   30:    fflush(stdout);        
call    0 returned 100%
        1:   31:    printf("__________________________________________________________________\n");
call    0 returned 100%
        1:   32:    fflush(stdout);        
call    0 returned 100%
        -:   33:	
        1:   34:    return 0;
        -:   35:}
        -:   36:
function testSmithy called 1 returned 100% blocks executed 100%
        1:   37:void testSmithy()
        -:   38:{
        -:   39:    struct gameState state;
        1:   40:    int players = 3;
        1:   41:    int seed = 100;
        1:   42:    int handPos = 0;
        1:   43:    int bonus = 0;
        -:   44:    
        1:   45:	int k[10] = {adventurer, gardens, smithy, village, great_hall, council_room, ambassador, mine, cutpurse, salvager};
        -:   46:	
        1:   47:    initializeGame(players, k, seed, &state);
call    0 returned 100%
        -:   48:    
        1:   49:    state.whoseTurn = 0;
        1:   50:    int handCountBeforePlayerOne = numHandCards(&state);
call    0 returned 100%
        -:   51:    
        1:   52:    int totalCardsBeforePlayerOne = state.deckCount[0] + state.discardCount[0] + state.handCount[0];
        -:   53:    
        1:   54:    int played =  cardEffect(gardens, 0, 0, 0, &state, handPos, &bonus);
call    0 returned 100%
        1:   55:    assertEquals(-1, played, "Confirming return code from cardEffect(...)");
call    0 returned 100%
        1:   56:    assertEquals(1, played, "Testing return code on cardEffect(...)");
call    0 returned 100%
        -:   57:    
        1:   58:    int totalCardsAfterPlayerOne = state.deckCount[0] + state.discardCount[0] + state.handCount[0];
        -:   59:    
        -:   60:    //player 0 (player one's turn)
        1:   61:    int handDifferencePlayerOne = abs(numHandCards(&state) - handCountBeforePlayerOne);
call    0 returned 100%
        -:   62:    
        -:   63:    //check hands of the active players
        1:   64:    assertEquals(0, handDifferencePlayerOne, "Testing difference in cards in hand before and after gardens card played");
call    0 returned 100%
        -:   65:    
        -:   66:    //make sure no cards were trashed
        1:   67:    assertEquals(totalCardsBeforePlayerOne, totalCardsAfterPlayerOne, "Testing difference in total cards before and after gardens card played");
call    0 returned 100%
        1:   68:}
        -:   69:
function assertEquals called 4 returned 100% blocks executed 100%
        4:   70:void assertEquals(int expected, int actual, char message[])
        -:   71:{
        4:   72:    printf("%s\n", message);
call    0 returned 100%
        4:   73:    fflush(stdout);
call    0 returned 100%
        -:   74:    
        4:   75:    if(expected == actual)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   76:    {
        2:   77:        printf("****************TEST SUCCESSFULLY COMPLETED****************\n");
call    0 returned 100%
        2:   78:        fflush(stdout);
call    0 returned 100%
        -:   79:    }
        -:   80:    else
        -:   81:    {
        2:   82:        printf("************************TEST FAILED************************\n");
call    0 returned 100%
        2:   83:        fflush(stdout);        
call    0 returned 100%
        -:   84:    }
        4:   85:}
