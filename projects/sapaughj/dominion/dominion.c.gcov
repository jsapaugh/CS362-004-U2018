        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:int villageEffect(int currentPlayer, int handPos, struct gameState* state);
        -:   10:int gardenEffect();
        -:   11:int smithyEffect(int i, int currentPlayer, int handPos, struct gameState* state);
        -:   12:int adventurerEffect(int drawntreasure, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z, struct gameState* state);
        -:   13:int councilRoomEffect(int i, int currentPlayer, int handPos, struct gameState* state);
        -:   14:
function compare called 255 returned 100% blocks executed 83%
      255:   15:int compare(const void* a, const void* b) {
      255:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   17:    return 1;
      255:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       68:   19:    return -1;
      187:   20:  return 0;
        -:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 2 returned 100% blocks executed 100%
        2:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
        2:   30:  int* k = malloc(10 * sizeof(int));
        2:   31:  k[0] = k1;
        2:   32:  k[1] = k2;
        2:   33:  k[2] = k3;
        2:   34:  k[3] = k4;
        2:   35:  k[4] = k5;
        2:   36:  k[5] = k6;
        2:   37:  k[6] = k7;
        2:   38:  k[7] = k8;
        2:   39:  k[8] = k9;
        2:   40:  k[9] = k10;
        2:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 6 returned 100% blocks executed 95%
        6:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        6:   51:  SelectStream(1);
call    0 returned 100%
        6:   52:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   53:  
        -:   54:  //check number of players
        6:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        6:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       66:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   65:    {
      660:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   67:        {
      600:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        6:   80:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   81:    {
        2:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
        4:   84:  else if (numPlayers == 3)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   85:    {
        3:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
        1:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        6:   94:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   95:    {
        2:   96:      state->supplyCount[estate] = 8;
        2:   97:      state->supplyCount[duchy] = 8;
        2:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
        4:  102:      state->supplyCount[estate] = 12;
        4:  103:      state->supplyCount[duchy] = 12;
        4:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        6:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  109:  state->supplyCount[silver] = 40;
        6:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      126:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  114:    {
      990:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  116:	{
      930:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       60:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  121:		{
       20:  122:		  if (numPlayers == 2){ 
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        3:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
        7:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
       50:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       60:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      870:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       23:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  146:    {
       17:  147:      state->deckCount[i] = 0;
       68:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  149:	{
       51:  150:	  state->deck[i][j] = estate;
       51:  151:	  state->deckCount[i]++;
        -:  152:	}
      136:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  154:	{
      119:  155:	  state->deck[i][j] = copper;
      119:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       23:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  162:    {
       17:  163:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
       23:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       17:  173:      state->handCount[i] = 0;
       17:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      168:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  184:    {
      162:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        6:  189:  state->outpostPlayed = 0;
        6:  190:  state->phase = 0;
        6:  191:  state->numActions = 1;
        6:  192:  state->numBuys = 1;
        6:  193:  state->playedCardCount = 0;
        6:  194:  state->whoseTurn = 0;
        6:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       36:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       30:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
        6:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
        6:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 17 returned 100% blocks executed 94%
       17:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       17:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       17:  216:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  217:    return -1;
       17:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      204:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      170:  222:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      170:  223:    newDeck[newDeckPos] = state->deck[player][card];
      170:  224:    newDeckPos++;
      593:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      423:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
      170:  228:    state->deckCount[player]--;
        -:  229:  }
      187:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      170:  231:    state->deck[player][i] = newDeck[i];
      170:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
       17:  235:  return 0;
        -:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
call    0 never executed
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
function numHandCards called 16 returned 100% blocks executed 100%
       16:  318:int numHandCards(struct gameState *state) {
       16:  319:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  320:}
        -:  321:
function handCard called 0 returned 0% blocks executed 0%
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 4 returned 100% blocks executed 88%
        4:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
        4:  333:  int count = 0;
        -:  334:
       17:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  336:    {
       13:  337:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  338:    }
        -:  339:
       25:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  341:    {
       21:  342:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  343:    }
        -:  344:
       13:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  346:    {
        9:  347:      if (state->discard[player][i] == card) count++;
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  348:    }
        -:  349:
        4:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 22 returned 100% blocks executed 100%
       22:  353:int whoseTurn(struct gameState *state) {
       22:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
function scoreFor called 4 returned 100% blocks executed 74%
        4:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
        4:  427:  int score = 0;
        -:  428:  //score from hand
       17:  429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  430:    {
       13:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       13:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       13:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       13:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       13:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       13:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
call    2 returned 100%
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
       11:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 64%
branch  1 taken 36% (fallthrough)
        -:  441:    {
        7:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        7:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
call    2 returned 100%
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
       11:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 64%
branch  1 taken 36% (fallthrough)
        -:  452:    {
        7:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
call    2 returned 100%
        -:  459:    }
        -:  460:
        4:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 38 returned 100% blocks executed 38%
       38:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
       38:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
    #####:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  541:      state->deck[player][i] = state->discard[player][i];
    #####:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
    #####:  545:    state->deckCount[player] = state->discardCount[player];
    #####:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
    #####:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
    #####:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
    #####:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
    #####:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
    #####:  566:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  567:      return -1;
        -:  568:
    #####:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  570:    state->deckCount[player]--;
    #####:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
       38:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
       38:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
       38:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       38:  583:    state->deckCount[player]--;
       38:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
       38:  587:  return 0;
        -:  588:}
        -:  589:
function getCost called 28 returned 100% blocks executed 100%
       28:  590:int getCost(int cardNumber)
        -:  591:{
       28:  592:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  593:    {
        -:  594:    case curse:
        1:  595:      return 0;
        -:  596:    case estate:
        1:  597:      return 2;
        -:  598:    case duchy:
        1:  599:      return 5;
        -:  600:    case province:
        1:  601:      return 8;
        -:  602:    case copper:
        1:  603:      return 0;
        -:  604:    case silver:
        1:  605:      return 3;
        -:  606:    case gold:
        1:  607:      return 6;
        -:  608:    case adventurer:
        1:  609:      return 6;
        -:  610:    case council_room:
        1:  611:      return 5;
        -:  612:    case feast:
        1:  613:      return 4;
        -:  614:    case gardens:
        1:  615:      return 4;
        -:  616:    case mine:
        1:  617:      return 5;
        -:  618:    case remodel:
        1:  619:      return 4;
        -:  620:    case smithy:
        1:  621:      return 4;
        -:  622:    case village:
        1:  623:      return 3;
        -:  624:    case baron:
        1:  625:      return 4;
        -:  626:    case great_hall:
        1:  627:      return 3;
        -:  628:    case minion:
        1:  629:      return 5;
        -:  630:    case steward:
        1:  631:      return 3;
        -:  632:    case tribute:
        1:  633:      return 5;
        -:  634:    case ambassador:
        1:  635:      return 3;
        -:  636:    case cutpurse:
        1:  637:      return 4;
        -:  638:    case embargo: 
        1:  639:      return 2;
        -:  640:    case outpost:
        1:  641:      return 5;
        -:  642:    case salvager:
        1:  643:      return 4;
        -:  644:    case sea_hag:
        1:  645:      return 4;
        -:  646:    case treasure_map:
        1:  647:      return 4;
        -:  648:    }
        -:  649:	
        1:  650:  return -1;
        -:  651:}
        -:  652:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        4:  655:  int i = 0;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
        4:  660:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
        4:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
        4:  665:  int drawntreasure = 0;
        4:  666:  int cardDrawn = 0;
        4:  667:  int z = 0;// this is the counter for the temp hand
        4:  668:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
        4:  674:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 25%
branch  3 taken 25%
branch  4 taken 25%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  675:    {
        -:  676:    case adventurer:
        1:  677:		return adventurerEffect(drawntreasure, currentPlayer, cardDrawn, temphand, z, state);
call    0 returned 100%
        -:  678:			
        -:  679:    case council_room:
    #####:  680:    	return councilRoomEffect(i, currentPlayer, handPos, state);
call    0 never executed
        -:  681:      
        -:  682:    case smithy:
        1:  683:    	return smithyEffect(i, currentPlayer, handPos, state);
call    0 returned 100%
        -:  684:		
        -:  685:    case village:
        1:  686:    	return villageEffect(currentPlayer, handPos, state);
call    0 returned 100%
        -:  687:
        -:  688:    case gardens:
        1:  689:      return gardenEffect();
call    0 returned 100%
        -:  690:      
        -:  691:    case tribute:
    #####:  692:    	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -:  693:    	{
    #####:  694:    		if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -:  695:    		{
    #####:  696:    			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  697:    			state->deckCount[nextPlayer]--;
        -:  698:    		}
    #####:  699:    		else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -:  700:    		{
    #####:  701:    			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  702:    			state->discardCount[nextPlayer]--;
        -:  703:    		}
        -:  704:    		else
        -:  705:    		{
        -:  706:    			//No Card to Reveal
        -:  707:    			if (DEBUG)
        -:  708:    			{
        -:  709:    				printf("No cards to reveal\n");
        -:  710:    			}
        -:  711:    		}
        -:  712:    	}
        -:  713:    	else
        -:  714:    	{
    #####:  715:    		if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -:  716:    		{
    #####:  717:    			for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  718:    			{
    #####:  719:    				state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####:  720:    				state->deckCount[nextPlayer]++;
    #####:  721:    				state->discard[nextPlayer][i] = -1;
    #####:  722:    				state->discardCount[nextPlayer]--;
        -:  723:    			}
    #####:  724:    			shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -:  725:    		}
    #####:  726:    		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  727:    		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  728:    		state->deckCount[nextPlayer]--;
    #####:  729:    		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  730:    		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  731:    		state->deckCount[nextPlayer]--;
        -:  732:    	}
        -:  733:
    #####:  734:    	if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -:  735:    	{
        -:  736:    		//If we have a duplicate card, just drop one
    #####:  737:    		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  738:    		state->playedCardCount++;
    #####:  739:    		tributeRevealedCards[1] = -1;
        -:  740:    	}
        -:  741:
    #####:  742:    	for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -:  743:    	{
    #####:  744:    		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  745:    		{
        -:  746:    			//Treasure cards
    #####:  747:    			state->coins += 2;
        -:  748:    		}
    #####:  749:    		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  750:    				tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens
branch  0 never executed
branch  1 never executed
    #####:  751:    				|| tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  752:    		{
        -:  753:    			//Victory Card Found
    #####:  754:    			drawCard(currentPlayer, state);
call    0 never executed
    #####:  755:    			drawCard(currentPlayer, state);
call    0 never executed
        -:  756:    		}
        -:  757:    		else
        -:  758:    		{
        -:  759:    			//Action Card
    #####:  760:    			state->numActions = state->numActions + 2;
        -:  761:    		}
        -:  762:    	}
    #####:  763:    	return 0;
        -:  764:			
        -:  765:    case feast:
        -:  766:      //gain card with cost up to 5
        -:  767:      //Backup hand
    #####:  768:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  769:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  770:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  771:      }
        -:  772:      //Backup hand
        -:  773:
        -:  774:      //Update Coins for Buy
    #####:  775:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  776:      x = 1;//Condition to loop on
    #####:  777:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  778:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  779:	  if (DEBUG)
        -:  780:	    printf("None of that card left, sorry!\n");
        -:  781:
        -:  782:	  if (DEBUG){
        -:  783:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  784:	  }
        -:  785:	}
    #####:  786:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  787:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  788:
        -:  789:	  if (DEBUG){
        -:  790:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  791:	  }
        -:  792:	}
        -:  793:	else{
        -:  794:
        -:  795:	  if (DEBUG){
        -:  796:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  797:	  }
        -:  798:
    #####:  799:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  800:	  x = 0;//No more buying cards
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:	  }
        -:  805:
        -:  806:	}
        -:  807:      }     
        -:  808:
        -:  809:      //Reset Hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  811:	state->hand[currentPlayer][i] = temphand[i];
    #####:  812:	temphand[i] = -1;
        -:  813:      }
        -:  814:      //Reset Hand
        -:  815:      			
    #####:  816:      return 0;
        -:  817:
        -:  818:    case mine:
    #####:  819:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  820:
    #####:  821:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  822:	{
    #####:  823:	  return -1;
        -:  824:	}
        -:  825:		
    #####:  826:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  827:	{
    #####:  828:	  return -1;
        -:  829:	}
        -:  830:
    #####:  831:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  832:	{
    #####:  833:	  return -1;
        -:  834:	}
        -:  835:
    #####:  836:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  840:
        -:  841:      //discard trashed card
    #####:  842:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  843:	{
    #####:  844:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  845:	    {
    #####:  846:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  847:	      break;
        -:  848:	    }
        -:  849:	}
        -:  850:			
    #####:  851:      return 0;
        -:  852:			
        -:  853:    case remodel:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:
    #####:  861:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  862:
        -:  863:      //discard card from hand
    #####:  864:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  865:
        -:  866:      //discard trashed card
    #####:  867:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  868:	{
    #####:  869:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  870:	    {
    #####:  871:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  872:	      break;
        -:  873:	    }
        -:  874:	}
    #####:  875:      return 0;
        -:  876:		
        -:  877:    case baron:
    #####:  878:      state->numBuys++;//Increase buys by 1!
    #####:  879:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  880:	int p = 0;//Iterator for hand!
    #####:  881:	int card_not_discarded = 1;//Flag for discard set!
    #####:  882:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  883:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  884:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  885:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  886:	    state->discardCount[currentPlayer]++;
    #####:  887:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  888:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  889:	    }
    #####:  890:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  891:	    state->handCount[currentPlayer]--;
    #####:  892:	    card_not_discarded = 0;//Exit the loop
        -:  893:	  }
    #####:  894:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  895:	    if(DEBUG) {
        -:  896:	      printf("No estate cards in your hand, invalid choice\n");
        -:  897:	      printf("Must gain an estate if there are any\n");
        -:  898:	    }
    #####:  899:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  900:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  901:	      state->supplyCount[estate]--;//Decrement estates
    #####:  902:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:		isGameOver(state);
call    0 never executed
        -:  904:	      }
        -:  905:	    }
    #####:  906:	    card_not_discarded = 0;//Exit the loop
        -:  907:	  }
        -:  908:			    
        -:  909:	  else{
    #####:  910:	    p++;//Next card
        -:  911:	  }
        -:  912:	}
        -:  913:      }
        -:  914:			    
        -:  915:      else{
    #####:  916:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  917:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  918:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  919:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  920:	    isGameOver(state);
call    0 never executed
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:	    
        -:  925:      
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case great_hall:
        -:  929:      //+1 Card
    #####:  930:      drawCard(currentPlayer, state);
call    0 never executed
        -:  931:			
        -:  932:      //+1 Actions
    #####:  933:      state->numActions++;
        -:  934:			
        -:  935:      //discard card from hand
    #####:  936:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  937:      return 0;
        -:  938:		
        -:  939:    case minion:
        -:  940:      //+1 action
    #####:  941:      state->numActions++;
        -:  942:			
        -:  943:      //discard card from hand
    #####:  944:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  945:			
    #####:  946:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  947:	{
    #####:  948:	  state->coins = state->coins + 2;
        -:  949:	}
        -:  950:			
    #####:  951:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  952:	{
        -:  953:	  //discard hand
    #####:  954:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  955:	    {
    #####:  956:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  957:	    }
        -:  958:				
        -:  959:	  //draw 4
    #####:  960:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  961:	    {
    #####:  962:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //other players discard hand and redraw if hand size > 4
    #####:  966:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  969:		{
    #####:  970:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  971:		    {
        -:  972:		      //discard hand
    #####:  973:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  974:			{
    #####:  975:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  976:			}
        -:  977:							
        -:  978:		      //draw 4
    #####:  979:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  drawCard(i, state);
call    0 never executed
        -:  982:			}
        -:  983:		    }
        -:  984:		}
        -:  985:	    }
        -:  986:				
        -:  987:	}
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case steward:
    #####:  991:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  992:	{
        -:  993:	  //+2 cards
    #####:  994:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  995:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  996:	}
    #####:  997:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 coins
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:      else
        -: 1003:	{
        -: 1004:	  //trash 2 cards in hand
    #####: 1005:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1006:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1007:	}
        -: 1008:			
        -: 1009:      //discard card from hand
    #####: 1010:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1011:    return 0;
        -: 1012:    
        -: 1013:    case ambassador:
    #####: 1014:      j = 0;		//used to check if player has enough cards to discard
        -: 1015:
    #####: 1016:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1017:	{
    #####: 1018:	  return -1;				
        -: 1019:	}
        -: 1020:
    #####: 1021:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1022:	{
    #####: 1023:	  return -1;
        -: 1024:	}
        -: 1025:
    #####: 1026:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
    #####: 1028:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1029:	    {
    #####: 1030:	      j++;
        -: 1031:	    }
        -: 1032:	}
    #####: 1033:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
    #####: 1035:	  return -1;				
        -: 1036:	}
        -: 1037:
        -: 1038:      if (DEBUG) 
        -: 1039:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1040:
        -: 1041:      //increase supply count for choosen card by amount being discarded
    #####: 1042:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1043:			
        -: 1044:      //each other player gains a copy of revealed card
    #####: 1045:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	{
    #####: 1047:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1048:	    {
    #####: 1049:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1050:	    }
        -: 1051:	}
        -: 1052:
        -: 1053:      //discard played card from hand
    #####: 1054:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1055:
        -: 1056:      //trash copies of cards returned to supply
    #####: 1057:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1058:	{
    #####: 1059:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1060:	    {
    #####: 1061:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1062:		{
    #####: 1063:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1064:		  break;
        -: 1065:		}
        -: 1066:	    }
        -: 1067:	}			
        -: 1068:
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case cutpurse:
        -: 1072:
    #####: 1073:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1074:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1075:	{
    #####: 1076:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1077:	    {
    #####: 1078:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1079:		{
    #####: 1080:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1081:		    {
    #####: 1082:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1083:		      break;
        -: 1084:		    }
    #####: 1085:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1086:		    {
    #####: 1087:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1088:			{
        -: 1089:			  if (DEBUG)
        -: 1090:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1091:			}	
    #####: 1092:		      break;
        -: 1093:		    }		
        -: 1094:		}
        -: 1095:					
        -: 1096:	    }
        -: 1097:				
        -: 1098:	}				
        -: 1099:
        -: 1100:      //discard played card from hand
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1102:
    #####: 1103:      return 0;
        -: 1104:
        -: 1105:		
        -: 1106:    case embargo: 
        -: 1107:      //+2 Coins
    #####: 1108:      state->coins = state->coins + 2;
        -: 1109:			
        -: 1110:      //see if selected pile is in play
    #####: 1111:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1112:	{
    #####: 1113:	  return -1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //add embargo token to selected supply pile
    #####: 1117:      state->embargoTokens[choice1]++;
        -: 1118:			
        -: 1119:      //trash card
    #####: 1120:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case outpost:
        -: 1124:      //set outpost flag
    #####: 1125:      state->outpostPlayed++;
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case salvager:
        -: 1132:      //+1 buy
    #####: 1133:      state->numBuys++;
        -: 1134:			
    #####: 1135:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1136:	{
        -: 1137:	  //gain coins equal to trashed card
    #####: 1138:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1139:	  //trash card
    #####: 1140:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1141:	}
        -: 1142:			
        -: 1143:      //discard card
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1145:      return 0;
        -: 1146:		
        -: 1147:    case sea_hag:
    #####: 1148:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1149:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1150:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1151:	  state->discardCount[i]++;
    #####: 1152:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1153:	}
        -: 1154:      }
    #####: 1155:      return 0;
        -: 1156:		
        -: 1157:    case treasure_map:
        -: 1158:      //search hand for another treasure_map
    #####: 1159:      index = -1;
    #####: 1160:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1161:	{
    #####: 1162:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1163:	    {
    #####: 1164:	      index = i;
    #####: 1165:	      break;
        -: 1166:	    }
        -: 1167:	}
    #####: 1168:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1169:	{
        -: 1170:	  //trash both treasure cards
    #####: 1171:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1172:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1173:
        -: 1174:	  //gain 4 Gold cards
    #####: 1175:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1176:	    {
    #####: 1177:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1178:	    }
        -: 1179:				
        -: 1180:	  //return success
    #####: 1181:	  return 1;
        -: 1182:	}
        -: 1183:			
        -: 1184:      //no second treasure_map found in hand
    #####: 1185:      return -1;
        -: 1186:    }
        -: 1187:	
    #####: 1188:  return -1;
        -: 1189:}
        -: 1190:
function adventurerEffect called 1 returned 100% blocks executed 69%
        1: 1191:int adventurerEffect(int drawntreasure, int currentPlayer, int cardDrawn,
        -: 1192:		              int temphand[MAX_HAND], int z, struct gameState* state)
        -: 1193:{
        -: 1194:  //initialize variable
        1: 1195:  cardDrawn = 0;
        4: 1196:	while (drawntreasure < 2)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1197:	{
        2: 1198:		if (state->deckCount[currentPlayer] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1199:		{
        -: 1200:			//if the deck is empty we need to shuffle discard and add to deck
    #####: 1201:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1202:		}
        2: 1203:		drawCard(currentPlayer, state);
call    0 returned 100%
        2: 1204:		drawCard(1, state);
call    0 returned 100%
        4: 1205:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
        2: 1206:				- 1]; //top card of hand is most recently drawn card.
        2: 1207:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1208:		{
        2: 1209:			drawntreasure++;
        -: 1210:		}
        -: 1211:		else
        -: 1212:		{
    #####: 1213:			temphand[z] = cardDrawn;
    #####: 1214:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1215:			z++;
        -: 1216:		}
        -: 1217:	}
        2: 1218:	while (z - 1 >= 0)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1219:	{
    #####: 1220:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####: 1221:				temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1222:		z = z - 1;
        -: 1223:	}
        1: 1224:	return 0;
        -: 1225:}
        -: 1226:
function smithyEffect called 1 returned 100% blocks executed 100%
        1: 1227:int smithyEffect(int i, int currentPlayer, int handPos, struct gameState* state)
        -: 1228:{
        -: 1229:	//+3 Cards
        4: 1230:	for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1231:	{
        3: 1232:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1233:	}
        -: 1234:	//discard card from hand
        1: 1235:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        1: 1236:	return 0;
        -: 1237:}
        -: 1238:
function villageEffect called 1 returned 100% blocks executed 100%
        1: 1239:int villageEffect(int currentPlayer, int handPos, struct gameState* state)
        -: 1240:{
        -: 1241:	//+1 Card
        1: 1242:	drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1243:	//+2 Actions
        1: 1244:	state->numActions = state->numActions + 2;
        -: 1245:	//discard played card from hand
        1: 1246:	discardCard(handPos+1, currentPlayer, state, 0);
call    0 returned 100%
        1: 1247:	return 0;
        -: 1248:}
        -: 1249:
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####: 1250:int councilRoomEffect(int i, int currentPlayer, int handPos, struct gameState* state)
        -: 1251:{
        -: 1252:  //initialize variable
    #####: 1253:  i = 0;
        -: 1254:	//+4 Cards
    #####: 1255:	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1256:	{
    #####: 1257:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1258:	}
        -: 1259:	//+1 Buy
    #####: 1260:	state->numBuys++;
        -: 1261:	//Each other player draws a card
    #####: 1262:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1263:	{
    #####: 1264:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1265:		{
    #####: 1266:			drawCard(i, state);
call    0 never executed
        -: 1267:		}
        -: 1268:	}
        -: 1269:	//put played card in played card pile
    #####: 1270:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1271:	return 0;
        -: 1272:}
        -: 1273:
function gardenEffect called 1 returned 100% blocks executed 100%
        1: 1274:int gardenEffect()
        -: 1275:{
        1: 1276:	return 0;
        -: 1277:}
        -: 1278:
        -: 1279:
function discardCard called 2 returned 100% blocks executed 78%
        2: 1280:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1281:{
        -: 1282:	
        -: 1283:  //if card is not trashed, added to Played pile 
        2: 1284:  if (trashFlag < 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1285:    {
        -: 1286:      //add card to played pile
        1: 1287:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1288:      state->playedCardCount++;
        -: 1289:    }
        -: 1290:	
        -: 1291:  //set played card to -1
        2: 1292:  state->hand[currentPlayer][handPos] = -1;
        -: 1293:	
        -: 1294:  //remove card from player's hand
        2: 1295:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1296:    {
        -: 1297:      //reduce number of cards in hand
    #####: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        2: 1300:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1301:    {
        -: 1302:      //reduce number of cards in hand
    #####: 1303:      state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:  else 	
        -: 1306:    {
        -: 1307:      //replace discarded card with last card in hand
        2: 1308:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1309:      //set last card to -1
        2: 1310:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1311:      //reduce number of cards in hand
        2: 1312:      state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:	
        2: 1315:  return 0;
        -: 1316:}
        -: 1317:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1318:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1319:{
        -: 1320:  //Note: supplyPos is enum of choosen card
        -: 1321:	
        -: 1322:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1323:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1324:    {
    #####: 1325:      return -1;
        -: 1326:    }
        -: 1327:	
        -: 1328:  //added card for [whoseTurn] current player:
        -: 1329:  // toFlag = 0 : add to discard
        -: 1330:  // toFlag = 1 : add to deck
        -: 1331:  // toFlag = 2 : add to hand
        -: 1332:
    #####: 1333:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1334:    {
    #####: 1335:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1336:      state->deckCount[player]++;
        -: 1337:    }
    #####: 1338:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
    #####: 1340:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1341:      state->handCount[player]++;
        -: 1342:    }
        -: 1343:  else
        -: 1344:    {
    #####: 1345:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1346:      state->discardCount[player]++;
        -: 1347:    }
        -: 1348:	
        -: 1349:  //decrease number in supply pile
    #####: 1350:  state->supplyCount[supplyPos]--;
        -: 1351:	 
    #####: 1352:  return 0;
        -: 1353:}
        -: 1354:
function updateCoins called 6 returned 100% blocks executed 82%
        6: 1355:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1356:{
        -: 1357:  int i;
        -: 1358:	
        -: 1359:  //reset coin count
        6: 1360:  state->coins = 0;
        -: 1361:
        -: 1362:  //add coins for each Treasure card in player's hand
       36: 1363:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1364:    {
       30: 1365:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1366:	{
       24: 1367:	  state->coins += 1;
        -: 1368:	}
        6: 1369:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1370:	{
    #####: 1371:	  state->coins += 2;
        -: 1372:	}
        6: 1373:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1374:	{
    #####: 1375:	  state->coins += 3;
        -: 1376:	}	
        -: 1377:    }	
        -: 1378:
        -: 1379:  //add bonus
        6: 1380:  state->coins += bonus;
        -: 1381:
        6: 1382:  return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
        -: 1386://end of dominion.c
        -: 1387:
