int whoseTurn(struct gameState *state) {
  return state->whoseTurn;
}

int compare(const void* a, const void* b) {
  if (*(int*)a > *(int*)b)
    return 1;
  if (*(int*)a < *(int*)b)
    return -1;
  return 0;
}

struct gameState* newGame() {
  struct gameState* g = malloc(sizeof(struct gameState));
  return g;
}

int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
		  int k8, int k9, int k10) {
  int* k = malloc(10 * sizeof(int));
  k[0] = k1;
  k[1] = k2;
  k[2] = k3;
  k[3] = k4;
  k[4] = k5;
  k[5] = k6;
  k[6] = k7;
  k[7] = k8;
  k[8] = k9;
  k[9] = k10;
  return k;
}





int adventurerEffect(int drawntreasure, int currentPlayer, int cardDrawn,
		              int temphand[MAX_HAND], int z, struct gameState* state)
{
  //initialize variable
  cardDrawn = 0;
	while (drawntreasure < 2)
	{
		if (state->deckCount[currentPlayer] < 1)
		{
			//if the deck is empty we need to shuffle discard and add to deck
			shuffle(currentPlayer, state);
		}
		drawCard(currentPlayer, state);
		drawCard(1, state);
		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
				- 1]; //top card of hand is most recently drawn card.
		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
		{
			drawntreasure++;
		}
		else
		{
			temphand[z] = cardDrawn;
			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
			z++;
		}
	}
	while (z - 1 >= 0)
	{
		state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
				temphand[z - 1]; // discard all cards in play that have been drawn
		z = z - 1;
	}
	return 0;
}




int smithyEffect(int i, int currentPlayer, int handPos, struct gameState* state)
{
	//+3 Cards
	for (i = 0; i < 3; i++)
	{
		drawCard(currentPlayer, state);
	}
	//discard card from hand
	discardCard(handPos, currentPlayer, state, 1);
	return 0;
}





int villageEffect(int currentPlayer, int handPos, struct gameState* state)
{
	//+1 Card
	drawCard(currentPlayer, state);
	//+2 Actions
	state->numActions = state->numActions + 2;
	//discard played card from hand
	discardCard(handPos+1, currentPlayer, state, 0);
	return 0;
}





int gardenEffect()
{
	return 0;
}


