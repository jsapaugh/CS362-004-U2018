        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author : Jacob Sapaugh
        -:    3:*          Oregon State University
        -:    4:*          CS 362
        -:    5:*          07-18-2018
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "interface.h"
        -:   11:#include "rngs.h"
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:
        -:   15:void assertEquals(int expected, int actual, char message[]);
        -:   16:void testSmithy();
        -:   17:
function main called 1 returned 100% blocks executed 100%
        1:   18:int main(int argc, char* argv[]) 
        -:   19:{
        1:   20:    char functionUnderTest[] = "int cardEffect(...) smithyCard(...)";
        -:   21:
        1:   22:    printf("__________________________________________________________________\n");
call    0 returned 100%
        1:   23:    fflush(stdout);        
call    0 returned 100%
        1:   24:    printf("*******Begin testing of %s*******\n",functionUnderTest);
call    0 returned 100%
        1:   25:    fflush(stdout);        
call    0 returned 100%
        -:   26:    
        1:   27:    testSmithy();
call    0 returned 100%
        -:   28:    
        1:   29:    printf("*******End testing of %s*******\n",functionUnderTest);
call    0 returned 100%
        1:   30:    fflush(stdout);        
call    0 returned 100%
        1:   31:    printf("__________________________________________________________________\n");
call    0 returned 100%
        1:   32:    fflush(stdout);        
call    0 returned 100%
        -:   33:	
        1:   34:    return 0;
        -:   35:}
        -:   36:
function testSmithy called 1 returned 100% blocks executed 100%
        1:   37:void testSmithy()
        -:   38:{
        -:   39:    struct gameState state;
        1:   40:    int players = 2;
        1:   41:    int seed = 100;
        1:   42:    int handPos = 0;
        1:   43:    int bonus = 0;
        -:   44:    
        1:   45:	int k[10] = {adventurer, gardens, smithy, village, great_hall, council_room, ambassador, mine, cutpurse, salvager};
        -:   46:	
        1:   47:    initializeGame(players, k, seed, &state);
call    0 returned 100%
        -:   48:
        1:   49:    int handCountBefore = numHandCards(&state);
call    0 returned 100%
        1:   50:    int deckCountBefore = state.deckCount[0];
        1:   51:    int totalCardsBefore = state.deckCount[0] + state.discardCount[0] + state.handCount[0];
        -:   52:
        1:   53:    int played =  cardEffect(smithy, 0, 0, 0, &state, handPos, &bonus);
call    0 returned 100%
        1:   54:    assertEquals(0, state.numActions, "Testing total number of actions after playing smithy");
call    0 returned 100%
        1:   55:    assertEquals(0, played, "Testing return code on cardEffect(...)");
call    0 returned 100%
        1:   56:    int totalCardsAfter = state.deckCount[0] + state.discardCount[0] + state.handCount[0];
        1:   57:    int handDifference = abs(numHandCards(&state) - handCountBefore);
call    0 returned 100%
        1:   58:    int deckDifference = abs(state.deckCount[0] - deckCountBefore);
        -:   59:    
        -:   60:    //determine if hand has the right number of cards
        1:   61:    assertEquals(2, handDifference, "Testing difference in cards in hand");
call    0 returned 100%
        -:   62:    //determine if deck has right number of cards
        1:   63:    assertEquals(4, deckDifference, "Testing difference in cards in deck");
call    0 returned 100%
        -:   64:    //make sure no cards were trashed
        1:   65:    assertEquals(totalCardsBefore, totalCardsAfter, "Testing difference in total cards");
call    0 returned 100%
        1:   66:}
        -:   67:
function assertEquals called 5 returned 100% blocks executed 100%
        5:   68:void assertEquals(int expected, int actual, char message[])
        -:   69:{
        5:   70:    printf("%s\n", message);
call    0 returned 100%
        5:   71:    fflush(stdout);
call    0 returned 100%
        -:   72:    
        5:   73:    if(expected == actual)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:   74:    {
        2:   75:        printf("****************TEST SUCCESSFULLY COMPLETED****************\n");
call    0 returned 100%
        2:   76:        fflush(stdout);
call    0 returned 100%
        -:   77:    }
        -:   78:    else
        -:   79:    {
        3:   80:        printf("************************TEST FAILED************************\n");
call    0 returned 100%
        3:   81:        fflush(stdout);        
call    0 returned 100%
        -:   82:    }
        5:   83:}
