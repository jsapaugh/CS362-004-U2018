        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 180255 returned 100% blocks executed 83%
   180255:    8:int compare(const void* a, const void* b) {
   180255:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
   180255:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    48068:   12:    return -1;
   132187:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 2 returned 100% blocks executed 100%
        2:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        2:   23:  int* k = malloc(10 * sizeof(int));
        2:   24:  k[0] = k1;
        2:   25:  k[1] = k2;
        2:   26:  k[2] = k3;
        2:   27:  k[3] = k4;
        2:   28:  k[4] = k5;
        2:   29:  k[5] = k6;
        2:   30:  k[6] = k7;
        2:   31:  k[7] = k8;
        2:   32:  k[8] = k9;
        2:   33:  k[9] = k10;
        2:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 4506 returned 100% blocks executed 95%
     4506:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     4506:   44:  SelectStream(1);
call    0 returned 100%
     4506:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
     4506:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4506:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    49566:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   495660:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   450600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4506:   73:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   74:    {
     1502:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     3004:   77:  else if (numPlayers == 3)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   78:    {
     3003:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4506:   87:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   88:    {
     1502:   89:      state->supplyCount[estate] = 8;
     1502:   90:      state->supplyCount[duchy] = 8;
     1502:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     3004:   95:      state->supplyCount[estate] = 12;
     3004:   96:      state->supplyCount[duchy] = 12;
     3004:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4506:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4506:  102:  state->supplyCount[silver] = 40;
     4506:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    94626:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   743490:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   698430:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    45060:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
    18020:  115:		  if (numPlayers == 2){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
     3003:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
     6007:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    36050:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    45060:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   653370:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    16523:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  139:    {
    12017:  140:      state->deckCount[i] = 0;
    48068:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    36051:  143:	  state->deck[i][j] = estate;
    36051:  144:	  state->deckCount[i]++;
        -:  145:	}
    96136:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    84119:  148:	  state->deck[i][j] = copper;
    84119:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    16523:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  155:    {
    12017:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    16523:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    12017:  166:      state->handCount[i] = 0;
    12017:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
   126168:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
   121662:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4506:  182:  state->outpostPlayed = 0;
     4506:  183:  state->phase = 0;
     4506:  184:  state->numActions = 1;
     4506:  185:  state->numBuys = 1;
     4506:  186:  state->playedCardCount = 0;
     4506:  187:  state->whoseTurn = 0;
     4506:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    27036:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    22530:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     4506:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     4506:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 23939 returned 100% blocks executed 100%
    23939:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    23939:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    23939:  209:  if (state->deckCount[player] < 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    11922:  210:    return -1;
    12017:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   144204:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   120170:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   120170:  216:    newDeck[newDeckPos] = state->deck[player][card];
   120170:  217:    newDeckPos++;
   395580:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
   275410:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   120170:  221:    state->deckCount[player]--;
        -:  222:  }
   132187:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   120170:  224:    state->deck[player][i] = newDeck[i];
   120170:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    12017:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 21016 returned 100% blocks executed 100%
    21016:  311:int numHandCards(struct gameState *state) {
    21016:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 4 returned 100% blocks executed 88%
        4:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        4:  326:  int count = 0;
        -:  327:
       17:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  329:    {
       13:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  331:    }
        -:  332:
       25:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  334:    {
       21:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  336:    }
        -:  337:
       13:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  339:    {
        9:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  341:    }
        -:  342:
        4:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 25522 returned 100% blocks executed 100%
    25522:  346:int whoseTurn(struct gameState *state) {
    25522:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 4 returned 100% blocks executed 74%
        4:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        4:  420:  int score = 0;
        -:  421:  //score from hand
       17:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  423:    {
       13:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       13:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       13:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       13:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       13:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       13:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       11:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 64%
branch  1 taken 36% (fallthrough)
        -:  434:    {
        7:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        7:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       11:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 64%
branch  1 taken 36% (fallthrough)
        -:  445:    {
        7:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
call    2 returned 100%
        -:  452:    }
        -:  453:
        4:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 41724 returned 100% blocks executed 85%
    41724:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    41724:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5961:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5961:  538:    state->deckCount[player] = state->discardCount[player];
     5961:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5961:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
     5961:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5961:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
     5961:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5961:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5961:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    35763:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    35763:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    35763:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    35763:  576:    state->deckCount[player]--;
    35763:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    35763:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 28 returned 100% blocks executed 100%
       28:  583:int getCost(int cardNumber)
        -:  584:{
       28:  585:  switch( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        1:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4504 returned 100% blocks executed 5%
     4504:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     4504:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     4504:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     4504:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     4504:  658:  int z = 0;// this is the counter for the temp hand
     4504:  659:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  660:    nextPlayer = 0;
        -:  661:  }
        -:  662:
        -:  663:
        -:  664:    //uses switch to select card and perform actions
     4504:  665:  switch( card )
branch  0 taken 44%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 1%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 22%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  666:  {
        -:  667:    case adventurer:
     2001:  668:        adventurerCard(currentPlayer, temphand, z, state);
call    0 returned 100%
     2001:  669:        return 0;
        -:  670:
        -:  671:    case council_room:
    #####:  672:        council_roomCard(currentPlayer, handPos, state);
call    0 never executed
    #####:  673:        return 0;
        -:  674:
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  688:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
        -:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  697:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
        -:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
        -:  723:      }
        -:  724:      //Reset Hand
        -:  725:
    #####:  726:      return 0;
        -:  727:
        -:  728:    case gardens:
        1:  729:      return -1;
        -:  730:
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  760:	      break;
        -:  761:	    }
        -:  762:	}
        -:  763:
    #####:  764:      return 0;
        -:  765:
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  785:	      break;
        -:  786:	    }
        -:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:
        -:  792:    case smithy:
     1501:  793:        smithyCard(currentPlayer, handPos, state);
call    0 returned 100%
     1501:  794:        return 0;
        -:  795:
        -:  796:    case village:
     1001:  797:        villageCard(currentPlayer, handPos, state);
call    0 returned 100%
     1001:  798:        return 0;
        -:  799:
        -:  800:    case baron:
    #####:  801:      state->numBuys++;//Increase buys by 1!
    #####:  802:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  803:	int p = 0;//Iterator for hand!
    #####:  804:	int card_not_discarded = 1;//Flag for discard set!
    #####:  805:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  806:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  807:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  808:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  809:	    state->discardCount[currentPlayer]++;
    #####:  810:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  811:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  812:	    }
    #####:  813:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  814:	    state->handCount[currentPlayer]--;
    #####:  815:	    card_not_discarded = 0;//Exit the loop
        -:  816:	  }
    #####:  817:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  818:	    if(DEBUG) {
        -:  819:	      printf("No estate cards in your hand, invalid choice\n");
        -:  820:	      printf("Must gain an estate if there are any\n");
        -:  821:	    }
    #####:  822:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  824:	      state->supplyCount[estate]--;//Decrement estates
    #####:  825:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:		isGameOver(state);
call    0 never executed
        -:  827:	      }
        -:  828:	    }
    #####:  829:	    card_not_discarded = 0;//Exit the loop
        -:  830:	  }
        -:  831:
        -:  832:	  else{
    #####:  833:	    p++;//Next card
        -:  834:	  }
        -:  835:	}
        -:  836:      }
        -:  837:
        -:  838:      else{
    #####:  839:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  840:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  841:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  842:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  843:	    isGameOver(state);
call    0 never executed
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:
        -:  848:
    #####:  849:      return 0;
        -:  850:
        -:  851:    case great_hall:
    #####:  852:        great_hallCard(currentPlayer, handPos, state);
call    0 never executed
    #####:  853:        return 0;
        -:  854:
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  861:
    #####:  862:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
        -:  865:	}
        -:  866:
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  873:	    }
        -:  874:
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  879:	    }
        -:  880:
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  892:			}
        -:  893:
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  896:			{
    #####:  897:			  drawCard(i, state);
call    0 never executed
        -:  898:			}
        -:  899:		    }
        -:  900:		}
        -:  901:	    }
        -:  902:
        -:  903:	}
    #####:  904:      return 0;
        -:  905:
        -:  906:    case steward:
    #####:  907:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  908:	{
        -:  909:	  //+2 cards
    #####:  910:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  912:	}
    #####:  913:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  914:	{
        -:  915:	  //+2 coins
    #####:  916:	  state->coins = state->coins + 2;
        -:  917:	}
        -:  918:      else
        -:  919:	{
        -:  920:	  //trash 2 cards in hand
    #####:  921:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  922:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  923:	}
        -:  924:
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  927:      return 0;
        -:  928:
        -:  929:    case tribute:
    #####:  930:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  931:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  932:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	  state->deckCount[nextPlayer]--;
        -:  934:	}
    #####:  935:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  936:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  937:	  state->discardCount[nextPlayer]--;
        -:  938:	}
        -:  939:	else{
        -:  940:	  //No Card to Reveal
        -:  941:	  if (DEBUG){
        -:  942:	    printf("No cards to reveal\n");
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:
        -:  947:      else{
    #####:  948:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  949:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  950:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  951:	    state->deckCount[nextPlayer]++;
    #####:  952:	    state->discard[nextPlayer][i] = -1;
    #####:  953:	    state->discardCount[nextPlayer]--;
        -:  954:	  }
        -:  955:
    #####:  956:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  957:	}
    #####:  958:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  960:	state->deckCount[nextPlayer]--;
    #####:  961:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
        -:  964:      }
        -:  965:
    #####:  966:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  967:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  968:	state->playedCardCount++;
    #####:  969:	tributeRevealedCards[1] = -1;
        -:  970:      }
        -:  971:
    #####:  972:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  973:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  974:	  state->coins += 2;
        -:  975:	}
        -:  976:
    #####:  977:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  978:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  979:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  980:	}
        -:  981:	else{//Action Card
    #####:  982:	  state->numActions = state->numActions + 2;
        -:  983:	}
        -:  984:      }
        -:  985:
    #####:  986:      return 0;
        -:  987:
        -:  988:    case ambassador:
    #####:  989:      j = 0;		//used to check if player has enough cards to discard
        -:  990:
    #####:  991:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  992:	{
    #####:  993:	  return -1;
        -:  994:	}
        -:  995:
    #####:  996:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  997:	{
    #####:  998:	  return -1;
        -:  999:	}
        -: 1000:
    #####: 1001:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1002:	{
    #####: 1003:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1004:	    {
    #####: 1005:	      j++;
        -: 1006:	    }
        -: 1007:	}
    #####: 1008:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1009:	{
    #####: 1010:	  return -1;
        -: 1011:	}
        -: 1012:
        -: 1013:      if (DEBUG)
        -: 1014:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1015:
        -: 1016:      //increase supply count for choosen card by amount being discarded
    #####: 1017:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1018:
        -: 1019:      //each other player gains a copy of revealed card
    #####: 1020:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1021:	{
    #####: 1022:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1023:	    {
    #####: 1024:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1025:	    }
        -: 1026:	}
        -: 1027:
        -: 1028:      //discard played card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1030:
        -: 1031:      //trash copies of cards returned to supply
    #####: 1032:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1033:	{
    #####: 1034:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1035:	    {
    #####: 1036:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1037:		{
    #####: 1038:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1039:		  break;
        -: 1040:		}
        -: 1041:	    }
        -: 1042:	}
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:
        -: 1046:    case cutpurse:
        -: 1047:
    #####: 1048:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1049:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1050:	{
    #####: 1051:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1052:	    {
    #####: 1053:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1054:		{
    #####: 1055:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1056:		    {
    #####: 1057:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1058:		      break;
        -: 1059:		    }
    #####: 1060:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1061:		    {
    #####: 1062:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1063:			{
        -: 1064:			  if (DEBUG)
        -: 1065:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1066:			}
    #####: 1067:		      break;
        -: 1068:		    }
        -: 1069:		}
        -: 1070:
        -: 1071:	    }
        -: 1072:
        -: 1073:	}
        -: 1074:
        -: 1075:      //discard played card from hand
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1077:
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:
        -: 1081:    case embargo:
        -: 1082:      //+2 Coins
    #####: 1083:      state->coins = state->coins + 2;
        -: 1084:
        -: 1085:      //see if selected pile is in play
    #####: 1086:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
        -: 1091:      //add embargo token to selected supply pile
    #####: 1092:      state->embargoTokens[choice1]++;
        -: 1093:
        -: 1094:      //trash card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1096:      return 0;
        -: 1097:
        -: 1098:    case outpost:
        -: 1099:      //set outpost flag
    #####: 1100:      state->outpostPlayed++;
        -: 1101:
        -: 1102:      //discard card
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1104:      return 0;
        -: 1105:
        -: 1106:    case salvager:
        -: 1107:      //+1 buy
    #####: 1108:      state->numBuys++;
        -: 1109:
    #####: 1110:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
        -: 1112:	  //gain coins equal to trashed card
    #####: 1113:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1114:	  //trash card
    #####: 1115:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard card
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1120:      return 0;
        -: 1121:
        -: 1122:    case sea_hag:
    #####: 1123:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1124:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1125:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1126:	  state->discardCount[i]++;
    #####: 1127:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1128:	}
        -: 1129:      }
    #####: 1130:      return 0;
        -: 1131:
        -: 1132:    case treasure_map:
        -: 1133:      //search hand for another treasure_map
    #####: 1134:      index = -1;
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1136:	{
    #####: 1137:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1138:	    {
    #####: 1139:	      index = i;
    #####: 1140:	      break;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
        -: 1145:	  //trash both treasure cards
    #####: 1146:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1147:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1148:
        -: 1149:	  //gain 4 Gold cards
    #####: 1150:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1153:	    }
        -: 1154:
        -: 1155:	  //return success
    #####: 1156:	  return 1;
        -: 1157:	}
        -: 1158:
        -: 1159:      //no second treasure_map found in hand
    #####: 1160:      return -1;
        -: 1161:    }
        -: 1162:
    #####: 1163:  return -1;
        -: 1164:}
        -: 1165:
function discardCard called 2502 returned 100% blocks executed 78%
     2502: 1166:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1167:{
        -: 1168:
        -: 1169:  //if card is not trashed, added to Played pile
     2502: 1170:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1171:    {
        -: 1172:      //add card to played pile
     2502: 1173:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     2502: 1174:      state->playedCardCount++;
        -: 1175:    }
        -: 1176:
        -: 1177:  //set played card to -1
     2502: 1178:  state->hand[currentPlayer][handPos] = -1;
        -: 1179:
        -: 1180:  //remove card from player's hand
     2502: 1181:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1182:    {
        -: 1183:      //reduce number of cards in hand
    #####: 1184:      state->handCount[currentPlayer]--;
        -: 1185:    }
     2502: 1186:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1187:    {
        -: 1188:      //reduce number of cards in hand
    #####: 1189:      state->handCount[currentPlayer]--;
        -: 1190:    }
        -: 1191:  else
        -: 1192:    {
        -: 1193:      //replace discarded card with last card in hand
     2502: 1194:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1195:      //set last card to -1
     2502: 1196:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1197:      //reduce number of cards in hand
     2502: 1198:      state->handCount[currentPlayer]--;
        -: 1199:    }
        -: 1200:
     2502: 1201:  return 0;
        -: 1202:}
        -: 1203:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1204:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1205:{
        -: 1206:  //Note: supplyPos is enum of choosen card
        -: 1207:
        -: 1208:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1209:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1210:    {
    #####: 1211:      return -1;
        -: 1212:    }
        -: 1213:
        -: 1214:  //added card for [whoseTurn] current player:
        -: 1215:  // toFlag = 0 : add to discard
        -: 1216:  // toFlag = 1 : add to deck
        -: 1217:  // toFlag = 2 : add to hand
        -: 1218:
    #####: 1219:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1220:    {
    #####: 1221:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1222:      state->deckCount[player]++;
        -: 1223:    }
    #####: 1224:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1225:    {
    #####: 1226:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1227:      state->handCount[player]++;
        -: 1228:    }
        -: 1229:  else
        -: 1230:    {
    #####: 1231:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1232:      state->discardCount[player]++;
        -: 1233:    }
        -: 1234:
        -: 1235:  //decrease number in supply pile
    #####: 1236:  state->supplyCount[supplyPos]--;
        -: 1237:
    #####: 1238:  return 0;
        -: 1239:}
        -: 1240:
function updateCoins called 4506 returned 100% blocks executed 82%
     4506: 1241:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1242:{
        -: 1243:  int i;
        -: 1244:
        -: 1245:  //reset coin count
     4506: 1246:  state->coins = 0;
        -: 1247:
        -: 1248:  //add coins for each Treasure card in player's hand
    27036: 1249:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1250:    {
    22530: 1251:      if (state->hand[player][i] == copper)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -: 1252:	{
    16324: 1253:	  state->coins += 1;
        -: 1254:	}
     6206: 1255:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1256:	{
    #####: 1257:	  state->coins += 2;
        -: 1258:	}
     6206: 1259:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1260:	{
    #####: 1261:	  state->coins += 3;
        -: 1262:	}
        -: 1263:    }
        -: 1264:
        -: 1265:  //add bonus
     4506: 1266:  state->coins += bonus;
        -: 1267:
     4506: 1268:  return 0;
        -: 1269:}
        -: 1270:
function smithyCard called 1501 returned 100% blocks executed 100%
     1501: 1271:void smithyCard(int currentPlayer, int handPos, struct gameState *state)
        -: 1272:{
        -: 1273:    int i;
        -: 1274:    //+3 Cards
        -: 1275:    // Added bug here, restrict player to add 4 cards to their hand rather than correct 3
     7505: 1276:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1277:    {
     6004: 1278:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1279:    }
        -: 1280:
        -: 1281:    //discard card from hand
     1501: 1282:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1501: 1283:}
        -: 1284:
function adventurerCard called 2001 returned 100% blocks executed 100%
     2001: 1285:void adventurerCard(int currentPlayer, int temphand[], int z, struct gameState *state)
        -: 1286:{
        -: 1287:    int cardDrawn;
     2001: 1288:    int drawntreasure = 0;
        -: 1289:    // Added bug here, changed < 2 to < 1
    16191: 1290:    while(drawntreasure < 1)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -: 1291:    {
    12189: 1292:        if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
     5961: 1293:            shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1294:        }
    12189: 1295:        drawCard(currentPlayer, state);
call    0 returned 100%
    12189: 1296:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    12189: 1297:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
        -: 1298:        {
     2001: 1299:            drawntreasure++;
        -: 1300:        }
        -: 1301:        else
        -: 1302:        {
    10188: 1303:            temphand[z] = cardDrawn;
    10188: 1304:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    10188: 1305:            z++;
        -: 1306:        }
        -: 1307:    }
        -: 1308:
    14190: 1309:    while(z - 1 >= 0)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1310:    {
    10188: 1311:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1]; // discard all cards in play that have been drawn
    10188: 1312:        z = z - 1;
        -: 1313:    }
     2001: 1314:}
        -: 1315:
function villageCard called 1001 returned 100% blocks executed 100%
     1001: 1316:void villageCard(int currentPlayer, int handPos, struct gameState *state)
        -: 1317:{
        -: 1318:    //+1 Card
     1001: 1319:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1320:
        -: 1321:    //+2 Actions
        -: 1322:    // Added bug here, adds 3 to players action count vs correct 2
     1001: 1323:    state->numActions = state->numActions + 3;
        -: 1324:
        -: 1325:    //discard played card from hand
     1001: 1326:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1001: 1327:}
        -: 1328:
function great_hallCard called 0 returned 0% blocks executed 0%
    #####: 1329:void great_hallCard(int currentPlayer, int handPos, struct gameState *state)
        -: 1330:{
        -: 1331:    //+1 Card
    #####: 1332:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1333:
        -: 1334:    //+1 Actions
    #####: 1335:    state->numActions++;
        -: 1336:
        -: 1337:    //discard card from hand
    #####: 1338:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1339:}
        -: 1340:
function council_roomCard called 0 returned 0% blocks executed 0%
    #####: 1341:void council_roomCard(int currentPlayer, int handPos, struct gameState *state)
        -: 1342:{
        -: 1343:    int i;
        -: 1344:    //+4 Cards
        -: 1345:    // Added bug here, add 3 cards to hand vs correct 4
    #####: 1346:    for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1347:    {
    #####: 1348:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1349:    }
        -: 1350:
        -: 1351:    //+1 Buy
    #####: 1352:    state->numBuys++;
        -: 1353:
        -: 1354:    //Each other player draws a card
    #####: 1355:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1356:    {
    #####: 1357:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1358:        {
    #####: 1359:            drawCard(i, state);
call    0 never executed
        -: 1360:        }
        -: 1361:    }
        -: 1362:
        -: 1363:    //put played card in played card pile
    #####: 1364:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1365:}
        -: 1366://end of dominion.c
