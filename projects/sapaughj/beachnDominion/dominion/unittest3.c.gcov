        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author : Jacob Sapaugh
        -:    3:*          Oregon State University
        -:    4:*          CS 362
        -:    5:*          07-18-2018
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:
        -:   14:/*
        -:   15:* Testing int* kingdomCards(..)
        -:   16:*/
        -:   17:
        -:   18:void assertEquals(int expected, int actual);
        -:   19:void testKingdomCards();
        -:   20:
function main called 1 returned 100% blocks executed 100%
        1:   21:int main(int argc, char * argv[])
        -:   22:{
        1:   23:    char functionUnderTest[] = "int* kingdomCards(...)";
        1:   24:    printf("__________________________________________________________________\n");
call    0 returned 100%
        1:   25:    fflush(stdout);        
call    0 returned 100%
        1:   26:    printf("*******Begin testing of %s*******\n",functionUnderTest);
call    0 returned 100%
        1:   27:    fflush(stdout);        
call    0 returned 100%
        -:   28:    
        1:   29:    testKingdomCards();
call    0 returned 100%
        -:   30:    
        1:   31:    fflush(stdout);        
call    0 returned 100%
        1:   32:    printf("*******End testing of %s*******\n",functionUnderTest);
call    0 returned 100%
        1:   33:    fflush(stdout);        
call    0 returned 100%
        1:   34:    printf("__________________________________________________________________\n");
call    0 returned 100%
        1:   35:    fflush(stdout);        
call    0 returned 100%
        -:   36:}
        -:   37:
function testKingdomCards called 1 returned 100% blocks executed 100%
        1:   38:void testKingdomCards()
        -:   39:{
        1:   40:    int* k = kingdomCards(0,1,2,3,4,5,6,7,8,9);
call    0 returned 100%
        1:   41:    int i = 0;
        -:   42:    
       11:   43:    for(i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   44:    {
       10:   45:        assertEquals(i,*(k+i));
call    0 returned 100%
        -:   46:    }
        -:   47:    
        1:   48:    int* k2 = kingdomCards(3,4,5,8,1,15,2,6,7,25);
call    0 returned 100%
        1:   49:    int testAgainst[10] = {3,4,5,8,1,15,2,6,7,25};
        -:   50:    
       11:   51:    for(i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   52:    {
       10:   53:        assertEquals(testAgainst[i],*(k2+i));
call    0 returned 100%
        -:   54:    }
        1:   55:}
        -:   56:
function assertEquals called 20 returned 100% blocks executed 67%
       20:   57:void assertEquals(int expected, int actual)
        -:   58:{
       20:   59:    if(expected == actual)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   60:    {
       20:   61:        printf("****************TEST SUCCESSFULLY COMPLETED****************\n");
call    0 returned 100%
       20:   62:        fflush(stdout);
call    0 returned 100%
        -:   63:    }
        -:   64:    else
        -:   65:    {
    #####:   66:        printf("************************TEST FAILED************************\n");
call    0 never executed
    #####:   67:        fflush(stdout);        
call    0 never executed
        -:   68:    }
       20:   69:}
