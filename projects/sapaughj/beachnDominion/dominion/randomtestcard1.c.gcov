        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:* Author : Jacob Sapaugh
        -:    3:*          Oregon State University
        -:    4:*          CS 362
        -:    5:*          08-04-2018
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include "interface.h"
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:#include <time.h>
        -:   15:
        -:   16:#define TEST_LOOPS 1500
        -:   17:
        -:   18:int assertEquals(int expected, int actual);
        -:   19:void testSmithy();
        -:   20:
function main called 1 returned 100% blocks executed 100%
        1:   21:int main(int argc, char* argv[])
        -:   22:{
        1:   23:    char functionUnderTest[] = "int cardEffect(...) smithyEffect(...)";
        -:   24:
        1:   25:    printf("__________________________________________________________________\n");
call    0 returned 100%
        1:   26:    fflush(stdout);        
call    0 returned 100%
        1:   27:    printf("*******Begin testing of %s*******\n",functionUnderTest);
call    0 returned 100%
        1:   28:    fflush(stdout);        
call    0 returned 100%
        -:   29:    
        1:   30:    testSmithy();
call    0 returned 100%
        -:   31:    
        1:   32:    printf("*******End testing of %s*******\n",functionUnderTest);
call    0 returned 100%
        1:   33:    fflush(stdout);        
call    0 returned 100%
        1:   34:    printf("__________________________________________________________________\n");
call    0 returned 100%
        1:   35:    fflush(stdout);        
call    0 returned 100%
        -:   36:	
        1:   37:    return 0;
        -:   38:}
        -:   39:
function testSmithy called 1 returned 100% blocks executed 100%
        1:   40:void testSmithy()
        -:   41:{
        -:   42:
        -:   43:	time_t t;
        1:   44:	srand((unsigned) time(&t));
call    0 returned 100%
call    1 returned 100%
        -:   45:	int i;
        1:   46:	int k[10] = {adventurer, gardens, smithy, village, great_hall, council_room, ambassador, mine, cutpurse, salvager};
        1:   47:	int kWithGoldSilverCopper[13] = {adventurer, gardens, smithy, village, great_hall, council_room, ambassador, mine, cutpurse, salvager, gold, silver, copper};
        1:   48:    int totalCardCountCorrect = 0;
        1:   49:	int deckCountCorrect = 0;
        1:   50:	int handCountCorrect = 0;
        1:   51:	int playerOneActionsTimes = 0;
        1:   52:	int correctNumberTimesPlayed = 0;
        -:   53:	
     1501:   54:	for(i = 0; i < TEST_LOOPS; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   55:	{    
        -:   56:    	struct gameState state;
     1500:   57:        int players = 2;
     1500:   58:        int seed = rand();
call    0 returned 100%
     1500:   59:        int handPos = 0;
     1500:   60:        int bonus = 0;
        -:   61:        
     1500:   62:        initializeGame(players, k, seed, &state);
call    0 returned 100%
        -:   63:    
        -:   64:    	int x;
        -:   65:	    //used 40 to fill the deck as it will provide plenty of cards to
        -:   66:	    //test each piece of the smithy effect function
    61500:   67:	    for(x = 0; x < 40; x++)
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   68:	    {
    60000:   69:	    	state.deck[0][x] = kWithGoldSilverCopper[rand() % 13];
call    0 returned 100%
    60000:   70:	    	state.hand[0][x] = kWithGoldSilverCopper[rand() % 13];
call    0 returned 100%
        -:   71:	    }
        -:   72:	    
     1500:   73:        int handCountBefore = numHandCards(&state);
call    0 returned 100%
     1500:   74:        int deckCountBefore = state.deckCount[0];
     1500:   75:        int totalCardsBefore = state.deckCount[0] + state.discardCount[0] + state.handCount[0];
        -:   76:    
     1500:   77:        int played =  cardEffect(smithy, 0, 0, 0, &state, handPos, &bonus);
call    0 returned 100%
        -:   78:        
     1500:   79:        playerOneActionsTimes += assertEquals(0, state.numActions);
call    0 returned 100%
     1500:   80:        correctNumberTimesPlayed += assertEquals(0, played);
call    0 returned 100%
        -:   81:        
     1500:   82:        int totalCardsAfter = state.deckCount[0] + state.discardCount[0] + state.handCount[0];
     1500:   83:        int handDifference = abs(numHandCards(&state) - handCountBefore);
call    0 returned 100%
     1500:   84:        int deckDifference = abs(state.deckCount[0] - deckCountBefore);
        -:   85:        
        -:   86:        //determine if hand has the right number of cards
     1500:   87:        handCountCorrect += assertEquals(2, handDifference);
call    0 returned 100%
        -:   88:        //determine if deck has right number of cards
     1500:   89:        deckCountCorrect += assertEquals(4, deckDifference);
call    0 returned 100%
        -:   90:        //make sure no cards were trashed
     1500:   91:        totalCardCountCorrect += assertEquals(totalCardsBefore, totalCardsAfter);
call    0 returned 100%
        -:   92:	}
        1:   93:	printf("Correct number of actions after player one played smithy card %d of %d times\n", playerOneActionsTimes, TEST_LOOPS);
call    0 returned 100%
        1:   94:	printf("cardEffect returned correctly %d of %d times\n", correctNumberTimesPlayed ,TEST_LOOPS);
call    0 returned 100%
        1:   95:	printf("Correct number of cards in player one's hand %d of %d times\n", handCountCorrect, TEST_LOOPS);
call    0 returned 100%
        1:   96:	printf("Correct number of cards in player one's deck %d of %d times\n", deckCountCorrect, TEST_LOOPS);
call    0 returned 100%
        1:   97:	printf("Correct number of total cards for player one %d of %d times\n", totalCardCountCorrect, TEST_LOOPS);
call    0 returned 100%
        1:   98:}
        -:   99:
function assertEquals called 7500 returned 100% blocks executed 100%
     7500:  100:int assertEquals(int expected, int actual)
        -:  101:{
     7500:  102:    if(expected == actual)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  103:    {
     3000:  104:        return 1;
        -:  105:    }
        -:  106:    else
        -:  107:    {
     4500:  108:        return 0;
        -:  109:    }
        -:  110:}
